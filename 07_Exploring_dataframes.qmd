---
title: "Exploring a data frame with `dplyr` and `ggplot2.`"
subtitle: "First steps."
author: "Silvie Cinková"
date: 2025-07-28
echo: true
format:
  revealjs:
    pdf: true
    pdf-engine: pagedjs
    plugins: [notes]
    toc: true
    slide-number: true
    notes: true
    pdf-export: true
    css: atrium.css
    chalkboard: false
    scrollable: true
    code-block-height: 650px
    echo: true
    #output-location: slide
    preview-links: auto
  pdf:
    engine: xelatex
    #highlight-style: kate
    documentclass: article
    toc: true
    code-block-border-left: false
    code-block:
      engine: listings
      wrap: true
    number-sections: true
    include-in-header: atrium.tex
    shift-heading-level-by: -1
  html:
    toc: true
    number-sections: true
    css: atrium.css
    embed-resources: true
---

## `readr`, `dplyr`, and `ggplot2`

```{r}
library(dplyr)
library(readr)
library(ggplot2)
library(glue) # just to make long strings wrap in PDF
```

::: notes
These are the three libraries you need most when you explore a tabular dataset.
:::

## Read the Gapminder labor cost data set

```{r}
myfilepath <-"datasets_ATRIUM/gapminder_hourly_labour_cost_constant_2017_usd--by--geo--time.csv" 
laborcost_df <- read_csv(file = myfilepath, 
                         show_col_types = TRUE)
```

::: notes
It is the file demonstrated in the previous session. We saved it into the folder `datasets_ATRIUM`. You can also get it at <https://raw.githubusercontent.com/open-numbers/ddf--gapminder--systema_globalis/refs/heads/master/countries-etc-datapoints/ddf--datapoints--hourly_labour_cost_constant_2017_usd--by--geo--time.csv>.

Watch the message `read_csv` gives you about the file. You can suppress it by overriding the default to `show_col_types = FALSE`.
:::

## `dplyr::glimpse`

-   peek at the dataset (tilted 90°)

```{r}
glimpse(laborcost_df)
```

::: notes
Gives you the number of rows and columns, the column names with their data class, and it also shows as many elements (values) in each column as to fit your screen.
:::

## `summary`

```{r}
summary(laborcost_df)
```

::: notes
Gives you the "five-number summary" of each numeric column (it's often called this way, although the numbers are obviously six...). With categorical columns, it depends, whether the column is a character vector or a factor.
:::

## `summary` with categorical columns as factors

```{r}
#| echo: false
laborcost_df %>% mutate(across(geo, ~ as.factor(.x))) %>% summary()
```

::: notes
If you have a data frame with categorical variables converted to factors, the summary will show you a glimpse of their **levels** (unique values) and their frequencies, as well as tell you how many levels there are.

So far, do not worry about factors. The `dplyr` as well as the `ggplot2` libraries do this factor conversion on the fly whenever they need it.
:::

## Rename a column with base R

`hourly_labour_cost_constant_2017_usd` too long, shorten to `labor_cost`.

```{r}
colnames(laborcost_df)[colnames(laborcost_df) ==
                         "hourly_labour_cost_constant_2017_usd"] <- "labor_cost"
```

```{r}
colnames(laborcost_df)
```

## Rename a column with `dplyr`

```{r}
#| echo: false
laborcost_df <- read_csv(file = myfilepath, 
                         show_col_types = FALSE)
```

```{r}
laborcost_df <- rename(.data = laborcost_df,
                       labor_cost = hourly_labour_cost_constant_2017_usd
                       )
colnames(laborcost_df)
```

::: notes
You already know you could have named all columns your way when reading in the file. Here are two ways to rename a column: one base-R-like and the other one provided by `dplyr`.
:::

## Filter rows with `dplyr`

```{r}
cze_deu_df <- dplyr::filter(laborcost_df, geo %in% c("cze", "deu"))
write_csv(cze_deu_df, "datasets_ATRIUM/gapminder_laborcost_cze_deu.csv")
```

::: notes
`dplyr::filter` keeps only rows that meet a condition (or a set of conditions) that you determine with logical operators.

We will return to this in more detail in a separate session.
:::

## List distinct values with `dplyr::distinct` {.scrollable}

```{r}
#| results: hide
dplyr::distinct(.data = laborcost_df, geo, .keep_all = FALSE)
```

```{r}
#| echo: false
#| warning: false
dplyr::distinct(.data = laborcost_df, geo, .keep_all = FALSE) %>% kableExtra::kable()
```

::: notes
The data set contains almost 50 countries. They will probably not be distinguishable in the plot.
:::

## Plot the data set

-   obviously not a very helpful plot, but anyway...

```{r}
laborcost_plot <- ggplot(data = laborcost_df, 
       mapping = aes(x = time, 
                     y = labor_cost,
                     color = geo)) + 
  geom_point()
laborcost_plot
```

::: notes
### Comment on the plot

How do you call plots with points and two axes?

How many variables does the plot capture and how? Which are the types of variables?

Look at the script. Try to dissect it in parts and interpret them.
:::

## Different mapping in the same plot

```{r}
laborcost_plot_size <- ggplot(data = laborcost_df,
                              mapping = aes(x = geo,
                                            y = time, 
                                            alpha = labor_cost)) + 
  geom_point()
laborcost_plot_size
```

::: notes
### Comment on this plot as well

How does it capture the variables now? Is it telling a different story?
:::

## Save a plot

```{r}
ggsave(filename = "my_output_files/laborcost_plot.svg", 
       plot = laborcost_plot)
ggsave(filename = "my_output_files/laborcost_plot.png", 
       plot = laborcost_plot,
       device = grDevices::png) 
# device = "png" or this when RStudio hickups
ggsave(filename = "my_output_files/laborcost_plot.pdf",
       plot = laborcost_plot)
list.files(path = "my_output_files/", pattern = "laborcost_plot")

```

::: notes
`ggsave` wants a file name (with path) including the format suffix.

Sometimes, especially when you run your scripts over and over in Quarto, something breaks behind the scenes and you get cryptical error messages about mismatch of graphical devices or similar. Sometimes the best solution is to restart R, close the file, clean the Environment and reopen the file. Or run the command directly in the Console.
:::

## First insights about `ggplot2`

-   Specific syntax

-   A plot is an object (goes in a variable)

-   Can be saved to files - include desired format in the file name

-   Maps variables on X, Y, color, transparency...

::: notes
Feel free to add more insights or impressions.
:::

## `ggplot2` $\approx$ implemented *Grammar of Graphics*

<https://ggplot2.tidyverse.org/>

-   All plots have the same logic and components in a few layers.

-   Not just drawings, statistical transformations behind the scenes (e.g. histogram)

-   When you see a `ggplot2` plot you have an idea how the source table is structured

::: notes
*Grammar of Graphics* is a [book by Leland Wilkinson](#0).

Base R plots: many independent packages $\rightarrow$ less consistence, harder to learn properly

You cannot save base R plots as objects.
:::

## Layers of `ggplot2`

-   Data

-   Aesthetic mappings + Facets (subgraphs)

-   Geometric objects (aka *geoms*)

-   Statistical transformations (aka *stats*)

-   Coordinate system

-   Theme

::: notes
Today just data, aesthetic mappings and geoms. This is enough to make an informative plot if you don't need it super pretty for publication.
:::

## Data

-   data frame with tidy data structure

    -   each observation on one row

    -   each variable in one column

-   categorical variables automatically read as factors

## Aesthetic scales (aka *mappings, aesthetics*)

-   axes X, Y

-   shape / linetype

-   color / fill / stroke

-   size / linewidth

-   alpha (transparency)

-   label

## Geometric objects aka *geoms*

plot types, such as:

-   histogram

-   scatterplot

-   barplot

-   boxplot

-   heatmap

-   and many others

::: notes
Try and sketch these plots by hand (fake data). What are these plots good at telling? How many of which variables?
:::

## A neater example dataset: just Czechia and Germany {.smaller}

-   only two values of a categorical variable, under 50 rows

```{r}
#| echo: false
cze_deu_df <- dplyr::filter(laborcost_df, geo %in% c("cze", "deu"))
write_csv(cze_deu_df, "datasets_ATRIUM/gapminder_laborcost_cze_deu.csv")
```

```{r}
cze_deu_df <- read_csv("datasets_ATRIUM/gapminder_laborcost_cze_deu.csv")
ggplot(data = cze_deu_df, 
       mapping = aes(x = time, y = labor_cost, color = geo)) + 
  geom_point(size = 7)
```

## Syntax

`ggplot(data, mappings) + geom_…( )`

or

`ggplot(data) + geom_…(mappings)`

::: notes
The `mapping` argument always takes the `aes()` function.

-   The plus sign never works at the beginning of a new line.

-   The geometric object (actual plot) is generated by a `geom_`*something*`()` function.

-   Different `geom_` functions require/accept different aesthetic scales. Look them up in help/cheat sheet.
:::
