---
title: "Organize yourself in RStudio"
echo: true
format:
  revealjs:
    plugins: [notes]
    toc: true
    slide-number: true
    notes: true
    pdf-export: true
    css: atrium.css
    chalkboard: true
    scrollable: false
    code-block-height: 650px
    echo: true
    #output-location: slide
    preview-links: auto
  pdf:
    toc: true
    number-sections: true
    include-in-header: atrium.tex
  html:
    toc: true
    number-sections: true
    css: atrium.css
---

## Jupyter hub at our department's server

-   Work in your web browser, URL below.

-   Use your individual user name and password.

![Login to Jupyterlab](images_ATRIUM/jupyterlab_01_login.png){#fig-login}

::: notes
AIC is the name of the server. UFAL is the name of our department. MFF stands for faculty. CUNI.CZ stands for Charles university in Czechia. JLAB is the name of this service.
:::

## Select RStudio

![Select RStudio](images_ATRIUM/jupyterlab_02_select_RStudio.png){#fig-select_RStudio}

::: notes
Hit the RStudio tile marked with a green scribble square. The other tiles would take you to different programming languages. There are also two tiles with the icon of the R programming language. They would run the bare R console for you. Programmers like it, but we would rather stick to the polished GUI of RStudio.

If you want to have it locally, install it from RStudio's web [https://posit.co/products/open-source/rstudio/?sid=1](#0). It will tell you to download and install the bare R first, from the *Comprehensive R Archive Network* <https://cran.r-project.org/> .
:::

## Files in RStudio

![](images_ATRIUM/Jupyterlab_04_RStudio_newQuarto.png){#fig-Quarto_newfile}

::: notes
In the top `Menu`, `Select File` \> `New`. You will get a choice from a number of formats. I write this with the Quarto tool and choose `Quarto presentation`. Another option is `Quarto document`. It is no big deal which you choose. Both are plain text files.
:::

## Quarto Editor Options: Visual

-   many formatting options as buttons
-   document displays as a rich text, even with images inserted.

![Quarto with the visual editor](images_ATRIUM/Jupyterlab_05_Quarto_VisualEditor.png){#fig-quarto_visualeditor}

## Quarto Editor Options: Source

-   Displays strictly plain text

-   You must format everything manually.

![Quarto editor in the source mode](images_ATRIUM/Jupyterlab_06_sourceEditor.png){#fig-Jupyter_SourceEditor}

::: notes
The basic formatting is done with **markdown** tags. You see a Level-2 Heading made with `##` and space and a URL link. For the fastest reference, go to RStudio's Menu bar and hit `Help > Markdown Quick Reference`. Look to the right bottom pane of RStudio. There are tabs `Files`, `Plots`, `Packages`, `Help`, `Viewer`, and `Presentation`. You will see the `Markdown Quick Reference` in the `Help` tab. But the little markdown you need you can absorb by reading the `.qmd` file of this document with the Source view on.
:::

## YAML header

-   File `YAML_header_multiformat`

-   Copy-paste it into your new file to get the same formatting you see here.

-   Keep files `atrium.css` and `atrium.tex` in the same folder!!!

```         
---
title: "Organize yourself in RStudio"
echo: true
format:
  revealjs:
    notes: true
    css: atrium.css
  pdf:
    include-in-header: atrium.tex
  html:
    css: atrium.css
---
```

::: notes
What makes plain text files real Quarto files is a piece of plain text metadata in the beginning: the YAML header, which you can overwrite.

YAML is not part of R and you will be perfectly fine without it in this course. Here are easy-to-read references to YAML, should you really crave for more:

-   <https://livingdevops.com/devops/a-complete-non-boring-guide-to-learn-yaml-in-2025/>

-   <https://github.com/VLabStudio/Tutorials/blob/master/The%20Basics%20of%20YAML%20in%20Under%205%20Minutes/Introduction%20to%20YAML.pdf>

Quarto has introduced a set of attributes and values in YAML. Here you see some of them. Some attributes explained:

-   `echo: true` When you render the document (i.e. typeset the document for printing), also display executable code snippets.

-   `format: revealjs, pdf, html` (watch out for the indentation!): you can render it in these three formats. `revealjs` are dynamic html slides as you see them in this presentation. Each format is specified with more fine-grained attributes. We are not going to delve into this. You can read the Quarto user guide and experiment yourself to become an expert.
:::

## CSS file

-   Format template for HTML pages, not R-specific.

-   Main purpose of `atrium.css`: larger font in code snippets

-   No `atrium.css/.tex` in YAML header âŸ¾ Quarto default

    ::: notes
    My YAML header contains references to styling files for html (`atrium.css`) and LaTeX (`atrium.tex`), mainly to make code snippets more legible on slides and to prevent code spilling over the margin in LaTeX (PDF).

    Generally, you should do fine without `.css` and `.tex` files like this, because the Quarto defaults are reasonable.
    :::

## Understand note taking with these teaching materials

-   ***Render*** your source `.qmd` files to PDF, HTML, ~~MS Word~~

-   https://quarto.org/docs/presentations/revealjs/

::: columns
::: {.column width="35%"}
![The `Render` button produces the document in the format you have specified in the YAML header as `format`.](images_ATRIUM/render_button.png){#fig-Jupyterlab_RenderButton}
:::

::: {.column width="65%"}
![When your YAML header lists multiple output formats, you have to choose which you want to render.](images_ATRIUM/Jupyterlab_12_RenderMultipleFormatOptions.png){#fig-Jupyterlab_12_RenderMultipleFormatOptions width="353"}
:::
:::

::: notes
`.qmd` is not very pretty for sharing. You should render it for print or web. Available document formats are PDF, HTML, and MS Word. The last one is not going to work here on the cloud because it needs MS Word locally installed and AIC Jupyterlab is a Linux machine.

Another option is rendering it as `revealjs` slides. revealjs is a Java format based on HTML. It creates dynamic presentations that open in the web browser. It is a different file from the HTML file you get when you render qmd as HTML. In fact, you have to render it live from the source every time you want to run the slide show.

The `revealjs` slide show enables speaker view, export to pdf, and many other widgets, if you list them in the YAML header. Render one of my source files as a slide show and explore it. And here is the user guide for `revealjs` Quarto presentations: [https://quarto.org/docs/presentations/revealjs/](#0) .

Find Settings, hit `e` as `Export to PDF mode` and you will get all slides (without speakers notes). Then find `Print` in the browser menu and send it to a printer or to PDF to get a PDF file. Anyway, if you want all this accompanying text along, then you are better off rendering this directly as PDF.
:::

## Resume broken connection 

::: columns
::: {.column width="50%"}
![You can see this after login or being idle. Just launch the server. ](images_ATRIUM/Jupyterlab_07_ServerNotRunnin.png){#fig-jupyter_server_notrunning}
:::

::: {.column width="50%"}
![When connection gets interrupted, you will see this. Just refresh and relaunch the server.](images_ATRIUM/Jupyterlab_08_RStudioDoesNotRespond.png){#fig-Jupyterlab_RStudio_NotResponding}
:::
:::

::: notes
Normally you will see RStudio right after the start, but sometimes the server says it is not running. Then hit the Launch Server button. Also, when you stay idle for a long time, the server will stop (1,000 seconds by default).

When the connection is broken, you will not be able to save or edit your files. Hit `Refresh` in your browser to invoke this page and relaunch the server.
:::

## Control RStudio's behavior

![Saving, Encoding, Working directory, Line wrapping\...](images_ATRIUM/Jupyterlab_09_GlobalOptions.png){#fig-Jupyterlab_GlobalOptions}

## Check autosaving options

![Some reasonable options for autosaving.](images_ATRIUM/Jupyterlab_11_Autosave.png){#fig-Jupyterlab_Autosaving}

## Control character encoding

![UTF-8 fits most use cases.](images_ATRIUM/Jupyterlab_13_Encoding.png){#fig-Jupyterlab_13_Encoding}

## Soft-wrap code

You will be able to see the entire line even if you narrow your browser window.

![Control code softwrapping](images_ATRIUM/Jupyterlab_10_SoftwrapCode.png){#fig-Jupyterlab_10_SoftwrapCode}

## Control text in `.qmd/.Rmd` documents

-   Soft-wrap text lines.

-   Display inserted figures in the editor (before rendering).

![When you write in qmd/Rmd documents, you must set some options extra for them in a separate menu.](images_ATRIUM/Jupyterlab_14_RmarkdownSoftwrapInline.png){#fig-Jupyterlab_14_RmarkdownSoftwrapInline width="551"}
