---
title: "Reading and writing files and the concept of Working Directory"
author: "Silvie Cinková"
date: 2025-07-24
echo: true
format:
  revealjs:
    pdf: true
    pdf-engine: pagedjs
    plugins: [notes]
    toc: true
    slide-number: true
    notes: true
    pdf-export: true
    css: atrium.css
    chalkboard: false
    scrollable: true
    code-block-height: 650px
    echo: true
    #output-location: slide
    preview-links: auto
  pdf:
    engine: xelatex
    #highlight-style: kate
    documentclass: article
    toc: true
    code-block-border-left: false
    code-block:
      engine: listings
      wrap: true
    number-sections: true
    shift-heading-level-by: -1
    include-in-header: atrium.tex
  html:
    toc: true
    number-sections: true
    css: atrium.css
    embed-resources: true
---


## Working directory {.smaller}

-   folder from which R sees other files and folders

</br>

::: columns
::: {.column width="20%"}
![Interactive control of Working Directory location](images_ATRIUM/Programming_11_WorkingDirectory.png){#Programming_11_WorkingDirectory}
:::

::: {.column width="80%"}
Print path to your current Working Directory

```{r}
getwd()
```

Set a different Working Directory

```{r}
#| eval: false
setwd("~/folder/subfolder/") # ~ means your home
```
:::
:::

## Let's have a common file path {.smaller}

1.  Make sure that your Working directory is your home.

2.  Create a new folder in your home. Call it `R_BEGINNERS_SHORT`.

    Enter that folder. Make it your Working Directory. (Gear icon $\rightarrow$ `Set As Working Directory`).

3.  Create new folders `datasets_ATRIUM` and `my_output_files`.

In the `File` tab, select `New project` $\rightarrow$ `In an existing directory`, and pick `R_BEGINNERS_SHORT`.

::: notes
If you execute this procedure, you will not need to adapt file paths in the teaching materials to your user account, except perhaps the user account name.
:::

## RStudio Projects

-   `.Rproj` file stores project configuration

-   When you open this project next time, it tries to restore the workspace from last time.

![Project List in RStudio](images_ATRIUM/Programming_14_RStudioProjectList.png){#Programming_14_RStudioProjectList}

## Download a file from (GitHub) URL {.smaller}

::: columns
::: {.column width="38%"}
![GitHub default view](images_ATRIUM/Programming_12_GitHub.png){#Programming_12_GitHub}
:::

::: {.column width="4%"}
:::

::: {.column width="48%"}
![Switched to raw file URL](images_ATRIUM/Programming_13_GitHubRaw.png){#Programming_13_GitHubRaw}
:::
:::

```{r}
#| name: downloadfiles
library(glue) # enables multiline with \\
URL <- glue("https://raw.githubusercontent.com/open-numbers/ddf--gapminder--\\
            systema_globalis/refs/heads/master/countries-etc-datapoints/ddf--\\
            datapoints--hourly_labour_cost_constant_2017_usd--by--geo--time.csv")
my_destination <- glue("datasets_ATRIUM/\\                       
gapminder_hourly_labour_cost_constant_2017_\\
                       usd--by--geo--time.csv")
download.file(
  url = URL,
  destfile = my_destination
  )
```

::: notes
The `download.file` function is universal to download any file from anywhere. Sometimes you can copy a download link from a website and use this URL to download the file programmatically.

This is how to download some data from GitHub, which is a bit specific. Here I work with data from Gapminder on Github. Their repository is very large and this was a largely random pick: `https://github.com/open-numbers/ddf–gapminder–systema_globalis/tree/master/countries-etc-datapoints`. This repository contains a table that explains each data set, but I am going to select one that is intelligible without reading much metadata. It is going to be a table about average labor cost in a given country in a given year: [https://raw.githubusercontent.com/open-numbers/ddf--gapminder--systema_globalis/refs/heads/master/countries-etc-datapoints/ddf--datapoints--hourly_labour_cost_constant_2017_usd--by--geo--time.csv](https://raw.githubusercontent.com/open-numbers/ddf--gapminder--systema_globalis/refs/heads/master/countries-etc-datapoints/ddf--datapoints--hourly_labour_cost_constant_2017_usd--by--geo--time.csv){.uri}.

Manually navigate to the file you want and copy its URL. Mind to use the URL that appears when you hit the `Raw` button ( starting with `https://raw.githubusercontent`) to download the contents of the file. On the default `https://github.com/….` you would only download a html file of the website you are seeing.

Use the `download.file` function. Leave all arguments at default, except `url` and `destfile`. Put the file into the new empty `datasets_ATRIUM` folder. Use the end part of the original file name and give it a prefix `gapminder_` and keep doing this with all files that you happen do download from this source. This will help you keep a system in your files.
:::

## https://www.gapminder.org/

::: columns
::: {.column width="50%"}
![Gapminder](images_ATRIUM/gapminder_02.png){#gapminder_02}
:::

::: {.column width="50%"}
![Introducing Gapminder](images_ATRIUM/gapminder_03.png){#gapminder_03}
:::
:::

## Read a `.csv`/`.tsv` file {.smaller}

-   plain text with column separators: `;` `,` or tabulator

-   inspect the file reading it as text (first 3 lines)

```{r}
#| name: baser_readlines
mypath <- glue("datasets_ATRIUM/gapminder_hourly_labour_cost_constant_2017_usd\\
               --by--geo--time.csv")
```

::: columns
::: {.column width="50%"}
```{r}
#| name: readr_readlines
library(readr)
read_lines(
  file = mypath, 
  n_max = 3)
```
:::

::: {.column width="50%"}
```{r}
#| name: baser_readlines
readLines(
  con = mypath,
  n = 3)
```
:::
:::

::: notes
What you are seeing are the first three lines of a tabular file we have just read as a text file, assuming no columns or headers. This comes handy when a file is too large to open interactively in a text editor, for instance.

A tabular file is a plaintext file where each line is one table row and the columns are on each line separated by the same character (throughout the file). The best-known tabular format is **comma-separated values** (`csv`). The original U.S. format uses comma. The European csv uses semicolons because comma is often reserved for the decimal operator (vs. decimal point in the U.S.). To skip these issues altogether, you better save your files as `tsv` (tab-separated values).

In the code above you see two functions that look similar and whose output looks exact the same. One is a base-R function, the other is from a `tidyverse` package called `readr`. Feel free to choose either and just make a mental note that there is an alternative. Sometimes, when a file is tricky to read in with one function, it goes well with the other.

Look at the Help to either function and explore its other arguments using the file you have just loaded.
:::

## Reading a table with `readr` {.smaller}

-   `read_csv`, `read_csv2`, `read_tsv`: tailored to the common separators `,`, `;`, tab

-   `read_delim` : you name the separator (aka delimiter), more arguments

```{r}
#| name: readcsv
read_csv(file = mypath, 
         n_max = 3) #just top 3 rows
```

## Other arguments in `read_csv`

```{r}
#| name: savefiles_more
read_csv(file = mypath, 
         col_names = c("country", "year", "USD_hour_2017"), 
         n_max = 3)
```

## Read directly from URL

```{r}
#| name: readrURL
URL2 <- glue("https://raw.githubusercontent.com/open-numbers/ddf--gapminder--\\
             systema_globalis/refs/heads/master/countries-etc-datapoints/\\
             ddf--datapoints--hourly_labour_cost_constant_2017_usd--by--geo--\\
             time.csv")
read_csv(file = URL2, 
         n_max = 3)
```

## Download an Excel file

```{r}
#| name: downloadexcel
URL3 <- glue("https://docs.google.com/spreadsheets/d/1qHalit8s\\
             XC0R8oVXibc2wa2gY7bkwGzOybEMTWp-08o/export?format=xlsx")
download.file(url = URL3, 
              destfile = 
                "datasets_ATRIUM/gapminder_geonames.xlsx", 
              mode = "wb")
```

With Windows formats and on Windows-operated computers, set `mode` to `wb`. Otherwise the file may get corrupted during the transmission.

## Read Excel

-   `readxl` reads only local file paths, not URLs.

```{r}
#| name: readxlfile
library(readxl)
read_xlsx(path = "datasets_ATRIUM/gapminder_geonames.xlsx", 
          n_max = 3) # just three rows
# readxl::read_xlsx(path = "datasets_ATRIUM/DataGeographies-v2-by-Gapminder.xlsx") #the same file

```

## Excel sheets listed

-   `read_xlsx` reads the first sheet by default
-   Have the spreadsheets listed:

```{r}
#| name: xlsheets
readxl::excel_sheets(path = "datasets_ATRIUM/gapminder_geonames.xlsx")
```

```{r}
#| name: readxlsheet
readxl::read_xlsx(path = "datasets_ATRIUM/gapminder_geonames.xlsx", sheet = 2, 
                  n_max = 3) # or sheet = "list-of-countries-etc"
```

## Google sheets

-   inspect [it](https://docs.google.com/spreadsheets/d/1qHalit8sXC0R8oVXibc2wa2gY7bkwGzOybEMTWp-08o/edit?gid=425865495#gid=425865495) manually and pick one worksheet

```{r}
#| name: gog4
library(googlesheets4)
shURL <- glue("https://docs.google.com/spreadsheets/d/1qHalit8sXC\\
              0R8oVXibc2wa2gY7bkwGzOybEMTWp-08o/edit?gid=425865495#gid=425865495")
gs4_deauth() # skip logging in at GoogleDrive
googlesheets4::read_sheet(shURL, sheet = 2, 
                          n_max = 3)

```

## Saving tabular files

```{r}
#| name: savefiles
gapminder_countries <- readxl::read_xlsx("datasets_ATRIUM/gapminder_geonames.xlsx",
                                         sheet = 2, 
                                         n_max = 3)
readr::write_tsv(x = gapminder_countries, 
                 file = "my_output_files/gapminder_countries.tsv")
```

## Some file management functions

-   create a file to save your exercise scripts

    ```{r}
    #| name: dircreate
    dir.create(path = "~/R_BEGINNERS_SHORT/my_exercise_scripts/",
               mode = '750', recursive = TRUE )
    ```

<!-- -->

-   list files in a folder

    -   just those with `qmd` in their names

    -   `recursive`: search in subfolders?

        ```{r}
        #| name: listfiles
        list.files(path = "~/R_BEGINNERS_SHORT", recursive = FALSE, include.dirs = FALSE, pattern = "qmd", full.names = TRUE)
        ```

::: notes
`mode` = [**octal notation**](https://www.ceos3c.com/linux/understanding-linux-file-permissions-octal-notation/) (access rights to file, just Unix)With `mode = '750'` you allow other students and teachers to see and execute files in this folder.
:::
